// Tiny Tot Database Schema
// Business Model Implementation:
// - Birth Lists (multi-brand product aggregation)
// - Contributions/Cagnotte system
// - Partnership/Affiliation tracking
// - Premium features support

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PARENT
  GUEST
  ADMIN
}

enum ListVisibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

enum SubscriptionTier {
  FREE
  PREMIUM
  ENTERPRISE
}

enum ContributionStatus {
  PENDING
  COMPLETED
  REFUNDED
  FAILED
}

enum ProductStatus {
  AVAILABLE
  RESERVED
  PURCHASED
  UNAVAILABLE
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?
  role          UserRole @default(PARENT)
  emailVerified DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  birthLists    BirthList[]
  contributions Contribution[]
  reservations  Reservation[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core Business Models

model BirthList {
  id               String         @id @default(cuid())
  title            String
  slug             String         @unique
  description      String?
  babyName         String?
  dueDate          DateTime?
  coverImage       String?
  visibility       ListVisibility @default(PUBLIC)
  subscriptionTier SubscriptionTier @default(FREE)
  
  // Multi-brand product aggregation
  products         ListProduct[]
  
  // Integrated cagnotte/contribution pool
  cagnotteEnabled  Boolean        @default(true)
  cagnotteGoal     Float?
  cagnotteRaised   Float          @default(0)
  
  // Commission tracking for revenue
  totalCommissions Float          @default(0)
  
  userId           String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  contributions    Contribution[]
  reservations     Reservation[]
  
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([userId])
  @@index([slug])
  @@index([visibility])
}

model Brand {
  id              String        @id @default(cuid())
  name            String        @unique
  logo            String?
  website         String?
  
  // Partnership tracking
  isPartner       Boolean       @default(false)
  commissionRate  Float?        // Affiliation commission percentage
  affiliateUrl    String?
  
  products        Product[]
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([name])
  @@index([isPartner])
}

model Product {
  id              String        @id @default(cuid())
  name            String
  description     String?
  price           Float
  currency        String        @default("EUR")
  imageUrl        String?
  productUrl      String?
  
  // Multi-brand support
  brandId         String
  brand           Brand         @relation(fields: [brandId], references: [id])
  
  // Affiliation tracking
  affiliateLink   String?
  
  listProducts    ListProduct[]
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([brandId])
  @@index([name])
}

model ListProduct {
  id              String         @id @default(cuid())
  quantity        Int            @default(1)
  priority        Int            @default(0) // For sorting/importance
  notes           String?
  status          ProductStatus  @default(AVAILABLE)
  
  birthListId     String
  birthList       BirthList      @relation(fields: [birthListId], references: [id], onDelete: Cascade)
  
  productId       String
  product         Product        @relation(fields: [productId], references: [id])
  
  reservations    Reservation[]
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([birthListId])
  @@index([productId])
  @@index([status])
}

model Reservation {
  id              String        @id @default(cuid())
  guestName       String
  guestEmail      String
  message         String?
  
  listProductId   String
  listProduct     ListProduct   @relation(fields: [listProductId], references: [id], onDelete: Cascade)
  
  birthListId     String
  birthList       BirthList     @relation(fields: [birthListId], references: [id], onDelete: Cascade)
  
  userId          String?
  user            User?         @relation(fields: [userId], references: [id])
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([listProductId])
  @@index([birthListId])
  @@index([userId])
}

// Revenue Model: Contributions with commission tracking
model Contribution {
  id              String             @id @default(cuid())
  amount          Float
  currency        String             @default("EUR")
  
  // Commission tracking (~4% + payment fees)
  commissionRate  Float              @default(4.0)
  commissionAmount Float
  paymentFee      Float              @default(0)
  netAmount       Float              // Amount after fees
  
  guestName       String
  guestEmail      String
  message         String?
  
  status          ContributionStatus @default(PENDING)
  
  // Payment integration (Stripe)
  paymentIntentId String?            @unique
  paymentMethod   String?
  
  birthListId     String
  birthList       BirthList          @relation(fields: [birthListId], references: [id], onDelete: Cascade)
  
  userId          String?
  user            User?              @relation(fields: [userId], references: [id])
  
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@index([birthListId])
  @@index([userId])
  @@index([status])
  @@index([paymentIntentId])
}

// Premium Features & Analytics
model Analytics {
  id              String    @id @default(cuid())
  eventType       String    // page_view, contribution, reservation, etc.
  metadata        Json?
  
  birthListId     String?
  
  createdAt       DateTime  @default(now())

  @@index([eventType])
  @@index([birthListId])
  @@index([createdAt])
}

